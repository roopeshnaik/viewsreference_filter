diff --git a/src/Plugin/ViewsReferenceSetting/ViewsReferenceFieldsOverride.php b/src/Plugin/ViewsReferenceSetting/ViewsReferenceFieldsOverride.php
new file mode 100644
index 0000000..efd0b35
--- /dev/null
+++ b/src/Plugin/ViewsReferenceSetting/ViewsReferenceFieldsOverride.php
@@ -0,0 +1,129 @@
+<?php
+
+namespace Drupal\viewsreference_filter\Plugin\ViewsReferenceSetting;
+
+use Drupal\Component\Plugin\PluginBase;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\views\ViewExecutable;
+use Drupal\viewsreference\Plugin\ViewsReferenceSettingInterface;
+use Drupal\viewsreference_filter\ViewsRefFilterUtilityInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * The views reference setting plugin for fields override, for editors.
+ *
+ * @ViewsReferenceSetting(
+ *   id = "fields_override",
+ *   label = @Translation("Fields override"),
+ *   default_value = "",
+ * )
+ */
+class ViewsReferenceFieldsOverride extends PluginBase implements ViewsReferenceSettingInterface, ContainerFactoryPluginInterface {
+
+  use StringTranslationTrait;
+
+  /**
+   * The factory to load a view executable with.
+   *
+   * @var \Drupal\views\ViewExecutableFactory
+   */
+  protected $viewsUtility;
+
+  /**
+   * TaxonomyLookup constructor.
+   *
+   * @param array $configuration
+   *   The Configuration.
+   * @param string $pluginId
+   *   The Plugin Id.
+   * @param string $pluginDefinition
+   *   The Plugin Definition.
+   * @param \Drupal\viewsreference_filter\ViewsRefFilterUtilityInterface $viewsUtility
+   *   The Utility View Functions.
+   */
+  public function __construct(array $configuration, $pluginId, $pluginDefinition, ViewsRefFilterUtilityInterface $viewsUtility) {
+    parent::__construct($configuration, $pluginId, $pluginDefinition);
+    $this->viewsUtility = $viewsUtility;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $pluginId, $pluginDefinition) {
+    return new static(
+      $configuration,
+      $pluginId,
+      $pluginDefinition,
+      $container->get('viewsreference_filter.views_utility')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function alterFormField(&$form_field) {
+    $view = $this->viewsUtility->loadView($this->configuration['view_name'], $this->configuration['display_id']);
+
+    if (!$view) {
+      $form_field = [];
+      return;
+    }
+
+    $current_values = $form_field['#default_value'];
+    unset($form_field['#default_value']);
+    $form_field['#type'] = 'container';
+    $form_field['#tree'] = TRUE;
+
+    // Create fieldset for fields.
+    $form_field['fields_override'] = [
+      '#type' => 'details',
+      '#title' => t('Fields to Display'),
+      '#open' => TRUE,
+    ];
+
+    $fields_override_enabled = FALSE;
+    $plugin_options = $view->display_handler->getOption('row');
+    $type = $plugin_options['type'];
+    if ($type == 'fields') {
+      foreach ($view->field as $field => $definition) {
+        if (!$fields_override_enabled) {
+          $fields_override_enabled = TRUE;
+        }
+        $default_value = (!empty($current_values)) ? (isset($current_values['fields_override'][$field]) && $current_values['fields_override'][$field]) : TRUE;
+        // Create set of checkboxs for fields to override.
+        if (!$definition->options["exclude"]) {
+          $form_field['fields_override'][$field] = [
+            '#type' => 'checkbox',
+            '#title' => ($definition->adminLabel()) ? $definition->adminLabel() : $definition->definition['title'],
+            '#default_value' => $default_value,
+          ];
+        }
+      }
+    }
+    // Disable fields and fieldset if not field available.
+    $form_field['fields_override']['#access'] = $fields_override_enabled;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function alterView(ViewExecutable $view, $values) {
+    if (isset($values['fields_override'])) {
+      $fields_override = $values['fields_override'];
+      foreach ($fields_override as $field => $value) {
+        if (!$value) {
+          // Remove the field if it not selected to display.
+          // Field can be in multiple places.
+          if (isset($view->display_handler->options["fields"][$field])) {
+            $view->display_handler->options["fields"][$field]['exclude'] = TRUE;
+          }
+          if (isset($view->display_handler->default_display->options["fields"][$field])) {
+            $view->display_handler->default_display->options["fields"][$field]['exclude'] = TRUE;
+          }
+        }
+      }
+    }
+  }
+
+}