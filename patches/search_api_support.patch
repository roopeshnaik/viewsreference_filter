diff --git a/src/Plugin/ViewsReferenceSetting/ViewsReferenceExposedFilters.php b/src/Plugin/ViewsReferenceSetting/ViewsReferenceExposedFilters.php
index 0358570..629f14a 100644
--- a/src/Plugin/ViewsReferenceSetting/ViewsReferenceExposedFilters.php
+++ b/src/Plugin/ViewsReferenceSetting/ViewsReferenceExposedFilters.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\viewsreference_filter\Plugin\ViewsReferenceSetting;
 
+use Drupal\Component\Datetime\DateTimePlus;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Form\FormState;
@@ -192,49 +193,7 @@ class ViewsReferenceExposedFilters extends PluginBase implements ContainerFactor
           // Set values of the filter.
           // @todo: Refactor switch case.
           if (isset($view_filters[$index]['plugin_id'])) {
-            switch ($view_filters[$index]['plugin_id']) {
-              case 'taxonomy_index_tid':
-                // Set the filter values for taxonomy autocomplete.
-                if (!empty($values[$index])) {
-                  if ($view_filters[$index]['type'] == 'textfield') {
-                    // Set the filter values for taxonomy autocomplete.
-                    $view_filters[$index]['value'] = array_column($values[$index], 'target_id');
-                  }
-                  else {
-                    $view_filters[$index]['value'] = $values[$index];
-                  }
-                }
-                break;
-
-              case 'numeric':
-              case 'datetime':
-                // Set for numeric and date values.
-                if (!empty($values[$index])) {
-                  $view_filters[$index]['value']['value'] = $values[$index];
-                }
-                else {
-                  if (!$show_filter) {
-                    unset($view_filters[$index]);
-                  }
-                }
-                break;
-
-              case 'boolean':
-                // Handle the boolean values.
-                // @todo: Handling boolean field 'All' values for view filters.
-                $view_filters[$index]['value'] = $values[$index];
-                if ($view_filters[$index]['value'] == 'All' && !$show_filter) {
-                  unset($view_filters[$index]);
-                }
-                break;
-
-              default:
-                // Set default.
-                if (!empty($values[$index])) {
-                  $view_filters[$index]['value'] = $values[$index];
-                }
-                break;
-            }
+            $this->setFilterValue($view_filters[$index]['plugin_id'], $view_filters, $values, $index);
           }
           $set_filter = TRUE;
         }
@@ -250,4 +209,156 @@ class ViewsReferenceExposedFilters extends PluginBase implements ContainerFactor
     }
   }
 
+  /**
+   * Set filters for view.
+   *
+   * @param $plugin_id
+   *   Plugin id for exposed filter.
+   * @param $view_filters
+   *   Filter options for the view.
+   * @param $values
+   *   Views filter value.
+   * @param $index
+   *   Filter name.
+   *
+   * @return bool
+   *   Returns true if filter is removed otherwise false.
+   */
+  protected function setFilterValue($plugin_id, &$view_filters, $values, $index) {
+    $field_identifier = $view_filters[$index]['expose']['identifier'];
+    switch ($plugin_id) {
+      case 'taxonomy_index_tid':
+      case 'search_api_term':
+        if (!$this->unsetTermAndBooleanFilter($view_filters, $values, $field_identifier, $index)) {
+          $tids = $this->getTermValues($values, $field_identifier);
+          if ($view_filters[$index]['expose']['multiple']) {
+            $tids = is_array($tids) ? $tids : [$tids];
+          }
+          else {
+            $tids = is_array($tids) ? [reset($tids)] : [$tids];
+          }
+          $view_filters[$index]['value'] = $tids;
+        }
+        break;
+
+      case 'numeric':
+      case 'datetime':
+        if (!$this->unsetFilter($view_filters, $values, $field_identifier, $index) && !empty($values[$field_identifier])) {
+          $view_filters[$index]['value']['value'] = $values[$field_identifier];
+        }
+        break;
+      case 'search_api_date':
+        if (!$this->unsetFilter($view_filters, $values, $field_identifier, $index) && !empty($values[$field_identifier])) {
+          $current_date_string_values = ['now', 'today'];
+          if (in_array($values[$field_identifier], $current_date_string_values)) {
+            $date = DateTimePlus::createFromTimestamp(time())->format('m/d/Y');
+            $view_filters[$index]['value']['value'] = $date;
+          }
+          else {
+            $view_filters[$index]['value']['value'] = $values[$field_identifier];
+          }
+
+        }
+        break;
+      case 'boolean':
+      case 'search_api_boolean':
+        // Handle the boolean values.
+        // @todo: Handling boolean field 'All' values for view filters.
+        if (!$this->unsetTermAndBooleanFilter($view_filters, $values, $field_identifier, $index) && !empty($values[$field_identifier])) {
+          $view_filters[$index]['value'] = $values[$field_identifier];
+        }
+        break;
+      case 'custom_az_filter':
+        if (!$this->unsetTermAndBooleanFilter($view_filters, $values, $field_identifier, $index) && !empty($values[$field_identifier])) {
+          $view_filters[$index]['value'] = $values[$field_identifier];
+        }
+        break;
+      default:
+        // Set default.
+        if (!$this->unsetFilter($view_filters, $values, $field_identifier, $index) && !empty($values[$field_identifier])) {
+          $view_filters[$index]['value'] = $values[$field_identifier];
+        }
+        break;
+    }
+  }
+
+  /**
+   * Unset Filter if value is not not set.
+   *
+   * @param $view_filters
+   *   Filter options for the view.
+   * @param $values
+   *   Views filter value.
+   * @param $field_identifier
+   *   Filter Identifier.
+   * @param $index
+   *   Filter name.
+   *
+   * @return bool
+   *   Returns true if filter is removed otherwise false.
+   */
+  protected function unsetTermAndBooleanFilter(&$view_filters, $values, $field_identifier, $index) {
+    if ((empty($values[$field_identifier]) || $values[$field_identifier] == 'All') && !$view_filters[$index]['exposed']) {
+      unset($view_filters[$index]);
+      return TRUE;
+    }
+    return FALSE;
+  }
+
+  /**
+   * Unset Filter if value is not not set.
+   *
+   * @param $view_filters
+   *   Filter options for the view.
+   * @param $values
+   *   Views filter value.
+   * @param $field_identifier
+   *   Filter Identifier.
+   * @param $index
+   *   Filter name.
+   *
+   * @return bool
+   *   Returns true if filter is removed otherwise false.
+   */
+  protected function unsetFilter(&$view_filters, $values, $field_identifier, $index) {
+    if (empty($values[$field_identifier]) && !$view_filters[$index]['exposed']) {
+      unset($view_filters[$index]);
+      return TRUE;
+    }
+    return FALSE;
+  }
+
+  /**
+   * Prepare term values.
+   *
+   * @param $values
+   *   Valued for the filter.
+   * @param $field_identifier
+   *   Filter Identifier.
+   * @return array|mixed
+   *   Array of term names.
+   */
+  protected function getTermValues($values, $field_identifier) {
+    if (isset($values[$field_identifier])) {
+      if ($this->checkArrayTargetIdColumnExists($values[$field_identifier])) {
+        // Set the filter values for taxonomy autocomplete.
+        return array_column($values[$field_identifier], 'target_id');
+      }
+      else {
+        return $values[$field_identifier];
+      }
+    }
+    return [];
+  }
+
+  /**
+   * Check if filter container target_id key or not.
+   */
+  protected function checkArrayTargetIdColumnExists($rows) {
+    if (is_array($rows) && !empty($rows[0]) && array_key_exists('target_id', $rows[0])){
+      return TRUE;
+    }
+    return FALSE;
+  }
+
 }
